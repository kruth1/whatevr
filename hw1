//hw1_cs1337
//kanduri

#include <iostream>
#include <fstream>
#include <iomanip>
#include <string>

using namespace std;

const int NUM_ELMTS = 18;

void sortgpa(){
    double sortedGPAbyGPA[NUM_ELMTS]; // GPA array, sorted by GPA
    int sortedNetIDbyGPA[NUM_ELMTS]; 
    string sortedMajorbyGPA[NUM_ELMTS]; 
    int j;
    int temp;
    
    for(int i = 0; i < NUM_ELMTS; i++){
        
        for(j=i + 1; j<NUM_ELMTS; j++){
            
            if (sortedGPAbyGPA[i] > sortedGPAbyGPA[j]){
                
                temp =sortedGPAbyGPA[i];
				sortedGPAbyGPA[i]=sortedGPAbyGPA[j];
				sortedGPAbyGPA[j]=temp;
            }
        }
        
    }
    
    cout << "Arrays sorted by GPA:" << endl << "---------------------\n" << "index" << setw(10)
    << "netID"<< setw(10) << "major" << setw(10)<< "GPA\n";

   /*for(i=0;i<NUM_ELMTS;i++){
           cout.precision(2);
    cout <<setw(5) << i <<setw(10) << sortedNetIDbyGPA[i] <<setw(10) << sortedMajorbyGPA[i] 
    << setw(10) << sortedGPAbyGPA[i] << fixed <<endl;	
        
        
    }*/
	
    
    
}

//void sortID(){
    

    

//}

int main()
{
    // netID, major and GPA are parallel arrays
int netID[NUM_ELMTS]; // Original netID array
string major[NUM_ELMTS]; // Original major array
double GPA[NUM_ELMTS]; // Original GPA array

// sortedGPAbyGPA is sorted by GPA, and sortedNetIDbyGPA and sortedMajorbyGPA are parallel arrays
double sortedGPAbyGPA[NUM_ELMTS]; // GPA array, sorted by GPA
int sortedNetIDbyGPA[NUM_ELMTS]; 
string sortedMajorbyGPA[NUM_ELMTS]; 

for(int i = 0; i<NUM_ELMTS; i++){
        
        sortedGPAbyGPA[i] = GPA[i];
        sortedNetIDbyGPA[i] = netID[i];
        sortedMajorbyGPA[i] = major[i];
    }

sortgpa;

// sortedNetIDbyID is sorted by netID, and sortedMajorbyID and sortedGPAbyID are parallel arrays 
int sortedNetIDbyID[NUM_ELMTS]; // netID array,sorted by netID
string sortedMajorbyID[NUM_ELMTS]; 
double sortedGPAbyID[NUM_ELMTS];

    for(int i = 0; i<NUM_ELMTS; i++){
        
        sortedGPAbyID[i] = GPA[i];
        sortedNetIDbyID[i] = netID[i];
        sortedMajorbyID[i] = major[i];
        
    }

//sortID;

string filename; //name of file user enters

cout << "Enter file name: ";
cin >> filename; //user entry

ifstream myfile (filename);//opening file user dictates


if(!myfile) { //isn't a real file 
    
    cout << "Could not open file" << endl;
    cout <<"Exiting\n";
    
    return 1; //exit program
}else {
   
    int count = 0;
    int entries;
    while (!myfile.eof()){
        
        myfile >> netID[count];
        myfile >> major[count];
        myfile >> GPA[count];
        count++;
    }
    entries = count;
    
     cout << "Original arrays:\n" << "----------------\n" << "index" << setw(10)
    << "netID"<< setw(10) << "major" << setw(10)<< "GPA\n";
    
    for (count = 0; count < entries; count++){
        
   cout.precision(2);
    cout <<setw(5) << count <<setw(10) << netID[count] <<setw(10) << major [count] 
    << setw(10) << GPA[count] << fixed <<endl;
        
    }
int choice;

cout << "***************\nMenu of choices\n***************\n" <<
"1 - List top n students\n2 - Search on a netID\n3 â€“ Quit" << endl;

cin >> choice;

if (choice == 1){
int n;
cout << "Enter n: ";
cin >> n;



} 
/*else if (choice ==2) {
    
    cout << "Enter netID: ";
    cin >> netID;
    
    cout <<"\nResult of linear search:" endl << "------------------------\n";
    
    linearsearchID()
    
    cout <<"\nResult of binary search:" endl << "------------------------\n";

    //binary search function goes here
}

else{ //if user quits
    
    cout << "Exiting\n";
    return 0;
}

}
    
} 

/* This function implements linear search on an array. It takes the following arguments:
arr: the array, numElems: number of elements of array,
value: search value, and nIter. nIter is a reference variable used
to pass the number of iterations back to the calling function.
The function returns the index where the match is found, -1 if no
match is found
*/
/*int linearSearchID(int arr[], int numElems, int value, int &nIter)
{
    // Function body 
}

/* This function implements binary search on an array. It takes the following arguments:
arr: the array, numElems: number of elements of array,
value: search value, and nIter. nIter is a reference variable used
to pass the number of iterations back to the calling function.
The function returns the index where the match is found, -1 if no
match is found
*/
/*int binarySearchID(int arr[], int numElems, int value, int &nIter)
{
    // Function body
}

/* This function sorts array1 and maintains the parallelism
of array2, and array3
Whenever elements of array1 are swapped, the elements of array 2
and array3 at the same indices are also swapped
*/
/*void modifiedSortGPA(double array1[], int array2[], string array3[], int size)
{
   // Function body
}

/* This function sorts array2 and maintains the parallelism
of array1 and array3
Whenever elements of array2 are swapped, the elements of array 1
and array3 at the same indices are also swapped
*/
/*void modifiedSortID(int array2[], double array1[], string array3[], int size)
{*/
   // Function body
}
}

